package snc02ManagerWebService;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceFeature;
import snc01ManagerWebService.SNC01ManagerService;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.7.15
 * 2015-07-20T08:30:33.655+08:00
 * Generated source version: 2.7.15
 * 
 */
//@WebServiceClient(name = "SNC02ManagerService", 
//                  wsdlLocation = "http://192.168.4.162:9092/SNC02Manager?wsdl",
//                  targetNamespace = "http://WebService/") 
public class SNC02ManagerService extends Service {

    public static URL WSDL_LOCATION;

    public URL getWSDL_LOCATION(String strWsdlPath) {
        setURL(strWsdlPath);
		return WSDL_LOCATION;
	}
    
    private static void setURL(String strWsdlPath)
    {
      URL url = null;
      try
      {
        url = new URL(strWsdlPath);
      }
      catch (MalformedURLException e)
      {
        Logger.getLogger(SNC01ManagerService.class.getName()).log(Level.INFO, 
          "Can not initialize the default wsdl from {0}", strWsdlPath);
      }
      WSDL_LOCATION = url;
    }

	public void setWSDL_LOCATION(URL wSDL_LOCATION) {
		WSDL_LOCATION = wSDL_LOCATION;
	}

	public final static QName SERVICE = new QName("http://WebService/", "SNC02ManagerService");
    public final static QName SNC02ManagerPort = new QName("http://WebService/", "SNC02ManagerPort");
//    static {
//        URL url = null;
//        try {
//            url = new URL("http://192.168.4.162:9092/SNC02Manager?wsdl");
//        } catch (MalformedURLException e) {
//            java.util.logging.Logger.getLogger(SNC02ManagerService.class.getName())
//                .log(java.util.logging.Level.INFO, 
//                     "Can not initialize the default wsdl from {0}", "http://192.168.4.162:9092/SNC02Manager?wsdl");
//        }
//        WSDL_LOCATION = url;
//    }

    public SNC02ManagerService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public SNC02ManagerService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public SNC02ManagerService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public SNC02ManagerService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public SNC02ManagerService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public SNC02ManagerService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns ISNC02Manager
     */
    @WebEndpoint(name = "SNC02ManagerPort")
    public ISNC02Manager getSNC02ManagerPort() {
        return super.getPort(SNC02ManagerPort, ISNC02Manager.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ISNC02Manager
     */
    @WebEndpoint(name = "SNC02ManagerPort")
    public ISNC02Manager getSNC02ManagerPort(WebServiceFeature... features) {
        return super.getPort(SNC02ManagerPort, ISNC02Manager.class, features);
    }

}
